/*
 * Generated by Bluespec Compiler, version 2022.01-36-ga6304315 (build a6304315)
 * 
 * On Fri Apr  7 13:10:09 EDT 2023
 * 
 */
#include "bluesim_primitives.h"
#include "mkSplitFA.h"


/* Constructor */
MOD_mkSplitFA::MOD_mkSplitFA(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent), __clk_handle_0(BAD_CLOCK_HANDLE), PORT_RST_N((tUInt8)1u)
{
  PORT_sum_a = false;
  PORT_sum_b = false;
  PORT_sum_cin = false;
  PORT_cout_a = false;
  PORT_cout_b = false;
  PORT_cout_cin = false;
  PORT_sum = false;
  PORT_RDY_sum = false;
  PORT_cout = false;
  PORT_RDY_cout = false;
  symbol_count = 12u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkSplitFA::init_symbols_0()
{
  init_symbol(&symbols[0u], "CAN_FIRE_cout", SYM_DEF, &DEF_CAN_FIRE_cout, 1u);
  init_symbol(&symbols[1u], "CAN_FIRE_sum", SYM_DEF, &DEF_CAN_FIRE_sum, 1u);
  init_symbol(&symbols[2u], "cout", SYM_PORT, &PORT_cout, 1u);
  init_symbol(&symbols[3u], "cout_a", SYM_PORT, &PORT_cout_a, 1u);
  init_symbol(&symbols[4u], "cout_b", SYM_PORT, &PORT_cout_b, 1u);
  init_symbol(&symbols[5u], "cout_cin", SYM_PORT, &PORT_cout_cin, 1u);
  init_symbol(&symbols[6u], "RDY_cout", SYM_PORT, &PORT_RDY_cout, 1u);
  init_symbol(&symbols[7u], "RDY_sum", SYM_PORT, &PORT_RDY_sum, 1u);
  init_symbol(&symbols[8u], "sum", SYM_PORT, &PORT_sum, 1u);
  init_symbol(&symbols[9u], "sum_a", SYM_PORT, &PORT_sum_a, 1u);
  init_symbol(&symbols[10u], "sum_b", SYM_PORT, &PORT_sum_b, 1u);
  init_symbol(&symbols[11u], "sum_cin", SYM_PORT, &PORT_sum_cin, 1u);
}


/* Rule actions */


/* Methods */

tUInt8 MOD_mkSplitFA::METH_sum(tUInt8 ARG_sum_a, tUInt8 ARG_sum_b, tUInt8 ARG_sum_cin)
{
  tUInt8 DEF_x__h37;
  PORT_sum_a = ARG_sum_a;
  PORT_sum_b = ARG_sum_b;
  PORT_sum_cin = ARG_sum_cin;
  DEF_x__h37 = ARG_sum_a ^ ARG_sum_b;
  PORT_sum = DEF_x__h37 ^ ARG_sum_cin;
  return PORT_sum;
}

tUInt8 MOD_mkSplitFA::METH_RDY_sum()
{
  DEF_CAN_FIRE_sum = (tUInt8)1u;
  PORT_RDY_sum = DEF_CAN_FIRE_sum;
  return PORT_RDY_sum;
}

tUInt8 MOD_mkSplitFA::METH_cout(tUInt8 ARG_cout_a, tUInt8 ARG_cout_b, tUInt8 ARG_cout_cin)
{
  tUInt8 DEF_x__h58;
  tUInt8 DEF_y__h59;
  tUInt8 DEF_y__h60;
  PORT_cout_a = ARG_cout_a;
  PORT_cout_b = ARG_cout_b;
  PORT_cout_cin = ARG_cout_cin;
  DEF_y__h60 = ARG_cout_a ^ ARG_cout_b;
  DEF_y__h59 = ARG_cout_cin & DEF_y__h60;
  DEF_x__h58 = ARG_cout_a & ARG_cout_b;
  PORT_cout = DEF_x__h58 | DEF_y__h59;
  return PORT_cout;
}

tUInt8 MOD_mkSplitFA::METH_RDY_cout()
{
  DEF_CAN_FIRE_cout = (tUInt8)1u;
  PORT_RDY_cout = DEF_CAN_FIRE_cout;
  return PORT_RDY_cout;
}


/* Reset routines */

void MOD_mkSplitFA::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkSplitFA::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkSplitFA::dump_state(unsigned int indent)
{
}


/* VCD dumping routines */

unsigned int MOD_mkSplitFA::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 13u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_cout", 1u);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_sum", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_write_def(sim_hdl, num++, "RDY_cout", 1u);
  vcd_write_def(sim_hdl, num++, "RDY_sum", 1u);
  vcd_write_def(sim_hdl, num++, "cout", 1u);
  vcd_write_def(sim_hdl, num++, "cout_a", 1u);
  vcd_write_def(sim_hdl, num++, "cout_b", 1u);
  vcd_write_def(sim_hdl, num++, "cout_cin", 1u);
  vcd_write_def(sim_hdl, num++, "sum", 1u);
  vcd_write_def(sim_hdl, num++, "sum_a", 1u);
  vcd_write_def(sim_hdl, num++, "sum_b", 1u);
  vcd_write_def(sim_hdl, num++, "sum_cin", 1u);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkSplitFA::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkSplitFA &backing)
{
  vcd_defs(dt, backing);
}

void MOD_mkSplitFA::vcd_defs(tVCDDumpType dt, MOD_mkSplitFA &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_cout) != DEF_CAN_FIRE_cout)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_cout, 1u);
	backing.DEF_CAN_FIRE_cout = DEF_CAN_FIRE_cout;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_sum) != DEF_CAN_FIRE_sum)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_sum, 1u);
	backing.DEF_CAN_FIRE_sum = DEF_CAN_FIRE_sum;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.PORT_RDY_cout) != PORT_RDY_cout)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_cout, 1u);
	backing.PORT_RDY_cout = PORT_RDY_cout;
      }
      ++num;
      if ((backing.PORT_RDY_sum) != PORT_RDY_sum)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_sum, 1u);
	backing.PORT_RDY_sum = PORT_RDY_sum;
      }
      ++num;
      if ((backing.PORT_cout) != PORT_cout)
      {
	vcd_write_val(sim_hdl, num, PORT_cout, 1u);
	backing.PORT_cout = PORT_cout;
      }
      ++num;
      if ((backing.PORT_cout_a) != PORT_cout_a)
      {
	vcd_write_val(sim_hdl, num, PORT_cout_a, 1u);
	backing.PORT_cout_a = PORT_cout_a;
      }
      ++num;
      if ((backing.PORT_cout_b) != PORT_cout_b)
      {
	vcd_write_val(sim_hdl, num, PORT_cout_b, 1u);
	backing.PORT_cout_b = PORT_cout_b;
      }
      ++num;
      if ((backing.PORT_cout_cin) != PORT_cout_cin)
      {
	vcd_write_val(sim_hdl, num, PORT_cout_cin, 1u);
	backing.PORT_cout_cin = PORT_cout_cin;
      }
      ++num;
      if ((backing.PORT_sum) != PORT_sum)
      {
	vcd_write_val(sim_hdl, num, PORT_sum, 1u);
	backing.PORT_sum = PORT_sum;
      }
      ++num;
      if ((backing.PORT_sum_a) != PORT_sum_a)
      {
	vcd_write_val(sim_hdl, num, PORT_sum_a, 1u);
	backing.PORT_sum_a = PORT_sum_a;
      }
      ++num;
      if ((backing.PORT_sum_b) != PORT_sum_b)
      {
	vcd_write_val(sim_hdl, num, PORT_sum_b, 1u);
	backing.PORT_sum_b = PORT_sum_b;
      }
      ++num;
      if ((backing.PORT_sum_cin) != PORT_sum_cin)
      {
	vcd_write_val(sim_hdl, num, PORT_sum_cin, 1u);
	backing.PORT_sum_cin = PORT_sum_cin;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_cout, 1u);
      backing.DEF_CAN_FIRE_cout = DEF_CAN_FIRE_cout;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_sum, 1u);
      backing.DEF_CAN_FIRE_sum = DEF_CAN_FIRE_sum;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, PORT_RDY_cout, 1u);
      backing.PORT_RDY_cout = PORT_RDY_cout;
      vcd_write_val(sim_hdl, num++, PORT_RDY_sum, 1u);
      backing.PORT_RDY_sum = PORT_RDY_sum;
      vcd_write_val(sim_hdl, num++, PORT_cout, 1u);
      backing.PORT_cout = PORT_cout;
      vcd_write_val(sim_hdl, num++, PORT_cout_a, 1u);
      backing.PORT_cout_a = PORT_cout_a;
      vcd_write_val(sim_hdl, num++, PORT_cout_b, 1u);
      backing.PORT_cout_b = PORT_cout_b;
      vcd_write_val(sim_hdl, num++, PORT_cout_cin, 1u);
      backing.PORT_cout_cin = PORT_cout_cin;
      vcd_write_val(sim_hdl, num++, PORT_sum, 1u);
      backing.PORT_sum = PORT_sum;
      vcd_write_val(sim_hdl, num++, PORT_sum_a, 1u);
      backing.PORT_sum_a = PORT_sum_a;
      vcd_write_val(sim_hdl, num++, PORT_sum_b, 1u);
      backing.PORT_sum_b = PORT_sum_b;
      vcd_write_val(sim_hdl, num++, PORT_sum_cin, 1u);
      backing.PORT_sum_cin = PORT_sum_cin;
    }
}
