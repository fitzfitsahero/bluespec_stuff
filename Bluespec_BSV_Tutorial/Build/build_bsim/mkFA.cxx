/*
 * Generated by Bluespec Compiler, version 2022.01-36-ga6304315 (build a6304315)
 * 
 * On Sun Apr  9 19:34:26 EDT 2023
 * 
 */
#include "bluesim_primitives.h"
#include "mkFA.h"


/* Constructor */
MOD_mkFA::MOD_mkFA(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent), __clk_handle_0(BAD_CLOCK_HANDLE), PORT_RST_N((tUInt8)1u)
{
  PORT_fa_a = false;
  PORT_fa_b = false;
  PORT_fa_c = false;
  PORT_fa = 0u;
  PORT_RDY_fa = false;
  symbol_count = 6u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkFA::init_symbols_0()
{
  init_symbol(&symbols[0u], "CAN_FIRE_fa", SYM_DEF, &DEF_CAN_FIRE_fa, 1u);
  init_symbol(&symbols[1u], "fa", SYM_PORT, &PORT_fa, 2u);
  init_symbol(&symbols[2u], "fa_a", SYM_PORT, &PORT_fa_a, 1u);
  init_symbol(&symbols[3u], "fa_b", SYM_PORT, &PORT_fa_b, 1u);
  init_symbol(&symbols[4u], "fa_c", SYM_PORT, &PORT_fa_c, 1u);
  init_symbol(&symbols[5u], "RDY_fa", SYM_PORT, &PORT_RDY_fa, 1u);
}


/* Rule actions */


/* Methods */

tUInt8 MOD_mkFA::METH_fa(tUInt8 ARG_fa_a, tUInt8 ARG_fa_b, tUInt8 ARG_fa_c)
{
  tUInt8 DEF_y__h48;
  tUInt8 DEF_x__h47;
  tUInt8 DEF_cout__h21;
  tUInt8 DEF_y__h49;
  tUInt8 DEF_s__h20;
  PORT_fa_a = ARG_fa_a;
  PORT_fa_b = ARG_fa_b;
  PORT_fa_c = ARG_fa_c;
  DEF_y__h49 = ARG_fa_a ^ ARG_fa_b;
  DEF_s__h20 = DEF_y__h49 ^ ARG_fa_c;
  DEF_x__h47 = ARG_fa_a & ARG_fa_b;
  DEF_y__h48 = ARG_fa_c & DEF_y__h49;
  DEF_cout__h21 = DEF_x__h47 | DEF_y__h48;
  PORT_fa = (tUInt8)3u & ((DEF_s__h20 << 1u) | DEF_cout__h21);
  return PORT_fa;
}

tUInt8 MOD_mkFA::METH_RDY_fa()
{
  DEF_CAN_FIRE_fa = (tUInt8)1u;
  PORT_RDY_fa = DEF_CAN_FIRE_fa;
  return PORT_RDY_fa;
}


/* Reset routines */

void MOD_mkFA::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkFA::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkFA::dump_state(unsigned int indent)
{
}


/* VCD dumping routines */

unsigned int MOD_mkFA::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 7u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_fa", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_write_def(sim_hdl, num++, "RDY_fa", 1u);
  vcd_write_def(sim_hdl, num++, "fa", 2u);
  vcd_write_def(sim_hdl, num++, "fa_a", 1u);
  vcd_write_def(sim_hdl, num++, "fa_b", 1u);
  vcd_write_def(sim_hdl, num++, "fa_c", 1u);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkFA::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkFA &backing)
{
  vcd_defs(dt, backing);
}

void MOD_mkFA::vcd_defs(tVCDDumpType dt, MOD_mkFA &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 2u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_fa) != DEF_CAN_FIRE_fa)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_fa, 1u);
	backing.DEF_CAN_FIRE_fa = DEF_CAN_FIRE_fa;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.PORT_RDY_fa) != PORT_RDY_fa)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_fa, 1u);
	backing.PORT_RDY_fa = PORT_RDY_fa;
      }
      ++num;
      if ((backing.PORT_fa) != PORT_fa)
      {
	vcd_write_val(sim_hdl, num, PORT_fa, 2u);
	backing.PORT_fa = PORT_fa;
      }
      ++num;
      if ((backing.PORT_fa_a) != PORT_fa_a)
      {
	vcd_write_val(sim_hdl, num, PORT_fa_a, 1u);
	backing.PORT_fa_a = PORT_fa_a;
      }
      ++num;
      if ((backing.PORT_fa_b) != PORT_fa_b)
      {
	vcd_write_val(sim_hdl, num, PORT_fa_b, 1u);
	backing.PORT_fa_b = PORT_fa_b;
      }
      ++num;
      if ((backing.PORT_fa_c) != PORT_fa_c)
      {
	vcd_write_val(sim_hdl, num, PORT_fa_c, 1u);
	backing.PORT_fa_c = PORT_fa_c;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_fa, 1u);
      backing.DEF_CAN_FIRE_fa = DEF_CAN_FIRE_fa;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, PORT_RDY_fa, 1u);
      backing.PORT_RDY_fa = PORT_RDY_fa;
      vcd_write_val(sim_hdl, num++, PORT_fa, 2u);
      backing.PORT_fa = PORT_fa;
      vcd_write_val(sim_hdl, num++, PORT_fa_a, 1u);
      backing.PORT_fa_a = PORT_fa_a;
      vcd_write_val(sim_hdl, num++, PORT_fa_b, 1u);
      backing.PORT_fa_b = PORT_fa_b;
      vcd_write_val(sim_hdl, num++, PORT_fa_c, 1u);
      backing.PORT_fa_c = PORT_fa_c;
    }
}
